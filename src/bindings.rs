/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pair {
    pub n: ::std::os::raw::c_int,
    pub m: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Pair() {
    const UNINIT: ::std::mem::MaybeUninit<Pair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Pair>(),
        8usize,
        concat!("Size of: ", stringify!(Pair))
    );
    assert_eq!(
        ::std::mem::align_of::<Pair>(),
        4usize,
        concat!("Alignment of ", stringify!(Pair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Pair), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Pair), "::", stringify!(m))
    );
}
extern "C" {
    pub fn gcd(
        i: ::std::os::raw::c_int,
        c: ::std::os::raw::c_char,
        ps: *mut Pair,
    ) -> ::std::os::raw::c_int;
}
